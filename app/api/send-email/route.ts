import { Resend } from 'resend';
import { NextRequest, NextResponse } from 'next/server';
import { ProcessedCandidate } from '@/app/types';

// Initialize Resend with API key (if available)
const resendApiKey = process.env.RESEND_API_KEY;
let resend: Resend | null = null;

if (resendApiKey) {
  resend = new Resend(resendApiKey);
}

// Function to generate HTML email content with a table of candidates
function generateEmailHtml(candidates: ProcessedCandidate[], jobTitle: string, companyName: string): string {
  // Calculate color based on score
  const getScoreColor = (score: number) => {
    if (score >= 80) return '#34D399'; // Green
    if (score >= 60) return '#FBBF24'; // Yellow
    return '#F87171'; // Red
  };

  // Generate table rows for each candidate
  const candidateRows = candidates.map(candidate => {
    const scoreColor = candidate.resumeAnalysis ? getScoreColor(candidate.resumeAnalysis.score) : '#9CA3AF';
    const score = candidate.resumeAnalysis ? candidate.resumeAnalysis.score : 'N/A';
    const status = candidate.resumeAnalysis ? candidate.resumeAnalysis.status : 'Not Analyzed';
    
    return `
      <tr>
        <td style="padding: 10px; border-bottom: 1px solid #E5E7EB;">${candidate.name}</td>
        <td style="padding: 10px; border-bottom: 1px solid #E5E7EB;"><a href="mailto:${candidate.email}" style="color: #3B82F6; text-decoration: none;">${candidate.email}</a></td>
        <td style="padding: 10px; border-bottom: 1px solid #E5E7EB;">
          <span style="display: inline-block; padding: 4px 8px; background-color: ${scoreColor}; color: white; border-radius: 9999px; font-size: 12px; font-weight: 500;">${score}%</span>
        </td>
        <td style="padding: 10px; border-bottom: 1px solid #E5E7EB;">${status}</td>
      </tr>
    `;
  }).join('');

  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Candidate Analysis Report for ${jobTitle}</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            color: #1F2937;
            margin: 0;
            padding: 0;
            background-color: #F9FAFB;
          }
          .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #FFFFFF;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
          }
          .header {
            text-align: center;
            padding-bottom: 20px;
            border-bottom: 1px solid #E5E7EB;
            margin-bottom: 20px;
          }
          h1 {
            color: #4F46E5;
            font-size: 24px;
            font-weight: 600;
            margin: 0;
          }
          h2 {
            color: #4B5563;
            font-size: 18px;
            font-weight: 500;
            margin: 0 0 10px 0;
          }
          table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
          }
          th {
            text-align: left;
            padding: 10px;
            background-color: #F3F4F6;
            border-bottom: 1px solid #E5E7EB;
            font-weight: 500;
            color: #4B5563;
          }
          .footer {
            margin-top: 30px;
            text-align: center;
            color: #9CA3AF;
            font-size: 14px;
            padding-top: 20px;
            border-top: 1px solid #E5E7EB;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Recruit Crm automation for humanX</h1>
            <p>Candidate Analysis for ${jobTitle}</p>
          </div>
          
          <h2>Candidate Summary</h2>
          <p>Below is a summary of all analyzed candidates for the ${jobTitle} position at ${companyName}.</p>
          
          <table>
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Score</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              ${candidateRows}
            </tbody>
          </table>
          
          <div class="footer">
            <p>Generated by AI Recruitment Assistant for ${companyName}</p>
            <p>${new Date().getFullYear()} ${companyName}</p>
          </div>
        </div>
      </body>
    </html>
  `;
}

export async function POST(request: NextRequest) {
  try {
    // Skip API calls during build time
    if (process.env.NODE_ENV === 'production' && process.env.VERCEL_ENV === 'production' && !resendApiKey) {
      // Return a mock response for build process
      return NextResponse.json({ 
        success: true, 
        message: 'Mock response during build',
        data: { id: 'mock-email-id' } 
      });
    }
    
    const { candidates, jobTitle, companyName, recipientEmail } = await request.json();
    
    if (!candidates || !Array.isArray(candidates) || candidates.length === 0 || !recipientEmail) {
      return NextResponse.json(
        { error: 'Candidate data array and recipient email are required' },
        { status: 400 }
      );
    }

    // Check if Resend is initialized
    if (!resend) {
      console.error('Resend API key is missing');
      return NextResponse.json(
        { error: 'Email service is not configured' },
        { status: 500 }
      );
    }

    // Generate HTML email content
    const emailHtml = generateEmailHtml(
      candidates,
      jobTitle || 'Not Specified',
      companyName || 'Your Company'
    );

    // Send the email
    const data = await resend.emails.send({
      from: 'AI Recruitment Assistant <onboarding@resend.dev>',
      to: recipientEmail,
      subject: `Candidate Analysis Report for ${jobTitle || 'Position'}`,
      html: emailHtml,
    });

    return NextResponse.json({ success: true, data });
  } catch (error) {
    console.error('Error sending email:', error);
    return NextResponse.json(
      { error: 'Failed to send email' },
      { status: 500 }
    );
  }
}
